version: '3.9'
services:

  mongo:
    image: mongo
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
    networks:
      - micro_net

  # Configuración de Kafka
  kafka:
    image: apache/kafka:latest
    container_name: kafka-service
    hostname: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@localhost:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_NUM_PARTITIONS: 3
    networks:
      - micro_net

  # Servicio para inicializar tópicos en Kafka
  kafka-init:
    image: apache/kafka:latest
    depends_on:
      - kafka
    entrypoint: ["/bin/sh", "-c"]
    command: >
      "
      # Esperamos que Kafka esté listo
      echo 'Esperando Kafka...' && sleep 30 &&

      /opt/kafka/bin/kafka-topics.sh --create --if-not-exists --bootstrap-server kafka:9092 --replication-factor 1 --partitions 1 --topic partidas &&

      echo 'Tópico partidas creado exitosamente.'
      "
    networks:
      - micro_net

  kong:
    image: kong:3.6
    depends_on:
      - models
      - plays
      - games
    volumes:
      - ./Kong/kong.yml:/usr/local/kong/declarative/kong.yml
    environment:
      KONG_DATABASE: "off"  # DB-less
      KONG_DECLARATIVE_CONFIG: "/usr/local/kong/declarative/kong.yml"
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: "0.0.0.0:8001"
    ports:
      - "8000:8000"  # Public gateway
      - "8002:8001"  # Admin API
    networks:
      - micro_net

  models:
    build: ./models
    environment:
      MONGO_URI: ${MONGO_URI}
    depends_on:
      - mongo
    ports:
      - "5000:5000"
    expose:
      - 8000
    networks:
      - micro_net

  plays:
    build: ./plays
    environment:
      KAFKA_BROKER: ${KAFKA_BROKER}
      MONGO_URI: ${MONGO_URI}
    depends_on:
      - kafka
      - mongo
    ports:
      - "8003:8000"
    expose:
      - 8000
    networks:
      - micro_net

  games:
    build: ./games
    environment:
      KAFKA_BROKER: ${KAFKA_BROKER}
      MONGO_URI: ${MONGO_URI}
    depends_on:
      - kafka
    ports:
      - "4000:4000"
    expose:
      - 8000
    networks:
      - micro_net
      
  nginx:
    image: nginx:latest
    container_name: nginx-reverse
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf:/etc/nginx/conf.d
      - ./certbot/www:/var/www/certbot
      - ./certbot/conf:/etc/letsencrypt
    depends_on:
      - kong
    networks:
      - micro_net

  certbot:
    image: certbot/certbot
    container_name: certbot
    volumes:
      - ./certbot/www:/var/www/certbot
      - ./certbot/conf:/etc/letsencrypt
    entrypoint: certbot
    command: certonly --webroot --force-renewal --webroot-path=/var/www/certbot --email Ingresa correo --agree-tos --no-eff-email -d Nombre-Dominio -d Nombre-Dominio
    depends_on:
      - nginx
    networks:
      - micro_net


volumes:
  mongo-data:

networks:
  micro_net:
    driver: bridge